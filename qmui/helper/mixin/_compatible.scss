// stylelint-disable
@charset "utf-8";

////
/// 兼容性封装，解决浏览器常用 css 兼容性问题，本文件所有方法均已废弃，改由 autoprefixer 代替
/// @author Clear, Molice, Zhoon, Kayo，Jeff
/// @group abandon
/// @date 2014-08-19
////

/// display: flex 的兼容性方法
///
/// @name flex
%flex {
  display: -moz-box;
  display: -webkit-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

/// display: flex 的兼容性方法
///
/// @name display-flex
@mixin display-flex {
  display: -moz-box;
  display: -webkit-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

/// flex 的兼容性方法
///
/// @name flexbox
/// @param {Number} $num - CSS flex 的属性值，即在父元素中的权重
@mixin flexbox($num) {
  // 在移动端只支持 flexbox 协议（旧的 flex API）的浏览器下，只有当你设置了 display: flex 属性后，其子元素的 flex 才会生效，因此这里同时设置了 display 以及 box-flex 属性
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  -webkit-box-flex: $num;
  -moz-box-flex: $num;
  -o-box-flex: $num;
  -ms-box-flex: $num;
  -webkit-flex: $num;
  -moz-flex: $num;
  -o-flex: $num;
  -ms-flex: $num;
  flex: $num;
}

@mixin flex-direction-ForOld($direction) {
  @if $direction == row { // old 版本还有 inline-axis | block-axis，暂不考虑
    -webkit-box-orient: horizontal ;
    -moz-box-orient: horizontal ;
    box-orient: horizontal;
  } @else if $direction == column {
    -webkit-box-orient: vertical ;
    -moz-box-orient: vertical ;
    box-orient: vertical;
  } @else if $direction == row-reverse {
    -webkit-box-orient: horizontal ;
    -moz-box-orient: horizontal ;
    box-orient: horizontal;
    -webkit-box-direction: reverse;
    -moz-box-direction: reverse;
    box-direction: reverse;
  } @else {
    -webkit-box-orient: vertical ;
    -moz-box-orient: vertical ;
    box-orient: vertical;
    -webkit-box-direction: reverse;
    -moz-box-direction: reverse;
    box-direction: reverse;
  }
}

/// 设置 flex 元素的伸缩流方向，即 box-orient 的兼容性方法
///
/// @name flex-direction
/// @param {String} $direction - 伸缩流方向，有 row，row-reverse，column，column-reverse 四个可选值
@mixin flex-direction($direction) {
  @include flex-direction-ForOld($direction);
  -ms-flex-direction: $direction;
  -webkit-flex-direction: $direction;
  flex-direction: $direction;
}

/// flex-grow 的兼容性方法
///
/// @name flex-grow
/// @param {Number} $num - CSS flex-grow 的属性值，即在父元素中的权重
@mixin flex-grow($num) {
  -webkit-box-flex: $num;
  -moz-box-flex: $num;
  -o-box-flex: $num;
  -ms-box-flex: $num;
  -ms-flex: $num; // for IE10
  -moz-box-flex-grow: $num;
  -webkit-flex-grow: $num;
  -ms-flex-grow: $num;
  flex-grow: $num;
}

/// flex-shrink 的兼容性方法
///
/// @name flex-shrink
/// @param {Number} $num - CSS flex-shrink 的属性值
@mixin flex-shrink($num) {
  -webkit-box-flex-shrink: $num;
  -moz-box-flex-shrink: $num;
  -webkit-flex-shrink: $num;
  -ms-flex-shrink: $num;
  flex-shrink: $num;
}

/// flex-basis 的兼容性方法
///
/// @name flex-basis
/// @param {Number} $num - CSS flex-basis 的属性值
@mixin flex-basis($num) {
  -webkit-box-flex-basis: $num;
  -moz-box-flex-basis: $num;
  -webkit-flex-basis: $num;
  -ms-flex-basis: $num;
  flex-basis: $num;
}

/// align-items 的兼容性方法
///
/// @name flex-align-items
/// @param {String} $value - 对齐方式，有 flex-start，flex-end，center，baseline，stretch 5个可选值
@mixin flex-align-items($value) {
  @if $value == "flex-start" {
    -webkit-box-align: start;
    -moz-box-align: start;
    -o-box-align: start;
    -ms-box-align: start;
  } @else if $value == "flex-end" {
    -webkit-box-align: end;
    -moz-box-align: end;
    -o-box-align: end;
    -ms-box-align: end;
  } @else {
    -webkit-box-align: $value;
    -moz-box-align: $value;
    -o-box-align: $value;
    -ms-box-align: $value;
  }
  -webkit-align-items: $value;
  -moz-align-items: $value;
  -o-align-items: $value;
  -ms-align-items: $value;
  -ms-flex-align: $value; // for IE10
  align-items: $value;
}

/// justify-content 的兼容性方法
///
/// @name flex-justify-content
/// @param {String} $value - CSS 属性 justify-content 的属性值，即 flex-start，flex-end，center，space-between，space-around 5个可选值
@mixin flex-justify-content($value) {
  @if $value == "space-around" {
    -webkit-box-pack: justify;
    -moz-box-pack: justify;
    -ms-flex-pack: distribute;
  } @else if $value == "flex-start" {
    -webkit-box-pack: start;
    -moz-box-pack: start;
    -ms-flex-pack: start;
  } @else if $value == "flex-end" {
    -webkit-box-pack: end;
    -moz-box-pack: end;
    -ms-flex-pack: end;
  } @else {
    -webkit-box-pack: $value;
    -moz-box-pack: $value;
    -ms-flex-pack: $value;
  }
  -webkit-justify-content: $value;
  -ms-justify-content: $value;
  -ms-flex-pack: $value; // for IE10
  justify-content: $value;
}

/// 根据子元素的布局方向，控制其对齐方式
///
/// @name flex-childPos
/// @param {String} $dir - 子元素当前的布局方向，可选值为 vertical 和 horizontal
/// @param {String} $value - 希望子元素对齐的方式，可选值为 flex-start，flex-end，center
@mixin flex-childPos($dir, $value) {
  @if $dir == "vertical" {
    @include flex-align-items($value);
  }
  @if $dir == "horizontal" {
    @include flex-justify-content($value);
  }
}

/// box-sizing 的兼容性方法
///
/// @name box-sizing
/// @param {String} $value - CSS 属性 box-sizing 的属性值
/// @deprecated 由于浏览器的迭代更新，目前 box-sizing 已经得到非常广泛的支持，无需使用兼容封装，请使用原生的 CSS 属性 box-sizing 取代本方法。
@mixin box-sizing($value) {
  -webkit-box-sizing: $value;
  -moz-box-sizing: $value;
  box-sizing: $value;
}

/// display: inline-block 的兼容性方法
///
/// @name inlineBlock
@mixin inlineBlock {
  display: inline-block;
  @if not($function_mobileOnly) {
    *display: inline;
    *zoom: 1;
  }
}

/// box-shadow 的兼容性方法
///
/// @name box-shadow
/// @param {String} $value - CSS 属性 box-shadow 的属性值
/// @deprecated 由于浏览器的迭代更新，目前 box-shadow 已经得到非常广泛的支持，无需使用兼容封装，请使用原生的 CSS 属性 box-shadow 取代本方法。
@mixin box-shadow($value...) {
  -webkit-box-shadow: $value;
  -moz-box-shadow: $value;
  box-shadow: $value;
}

/// 透明度的浏览器兼容方法
///
/// @name opacity
/// @param {Number} $var - 不透明度
@mixin opacity($var) {
  -webkit-opacity: $var;
  -moz-opacity: $var;
  opacity: $var;
  filter: alpha(opacity=$var*100);
  @if not($function_mobileOnly) {
    -khtml-opacity: $var;
  }
}

/// appearance 的浏览器兼容方法
///
/// @name appearance
/// @param {Number} $value - CSS 属性 appearance 的属性值
@mixin appearance($value) { // 暂不支持IE和Opera
  -moz-appearance: $value;
  -webkit-appearance: $value;
  appearance: $value;
}

/// 选择内容的 CSS 选择器
///
/// @name selection
@mixin selection {
  @at-root #{&}::selection {
    @content;
  }

  @at-root #{&}::-moz-selection {
    @content;
  }

  @at-root #{&}::-webkit-selection {
    @content;
  }
}

/// user-select: none 的兼容性方法
///
/// @name disabledUserSelect
%disabledUserSelect {
  -moz-user-select: none;
  -webkit-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

/// CSS3 transform 的兼容性方法
///
/// @name transform
/// @param {String} $value - CSS 属性 transform 的属性值
@mixin transform($value) {
  -o-transform: $value;
  -moz-transform: $value;
  -ms-transform: $value;
  -webkit-transform: $value;
  transform: $value;
}

/// CSS3 transform: scale 的兼容性方法
///
/// @name scale
/// @param {Number} $ratioX - X轴方向缩放的倍数，小数位缩小，大于1为放大
/// @param {Number} $ratioY [$ratioX 的值] - Y轴方向缩放的倍数，小数位缩小，大于1为放大
@mixin scale($ratioX, $ratioY: $ratioX) {
  -webkit-transform: scale($ratioX, $ratioY);
  -moz-transform: scale($ratioX, $ratioY);
  -ms-transform: scale($ratioX, $ratioY); // IE9 only
  -o-transform: scale($ratioX, $ratioY);
  transform: scale($ratioX, $ratioY);
}

/// CSS3 transform: scale3d 的兼容性方法
///
/// @name scale3d
/// @param {Number} $ratioX - X轴方向缩放的倍数，小数位缩小，大于1为放大
/// @param {Number} $ratioY [$ratioX 的值] - Y轴方向缩放的倍数，小数位缩小，大于1为放大
/// @param {Number} $ratioZ [$ratioY 的值] - Z轴方向缩放的倍数，小数位缩小，大于1为放大
@mixin scale3d($ratioX, $ratioY: $ratioX, $ratioZ: $ratioY) {
  -webkit-transform: scale3d($ratioX, $ratioY, $ratioZ);
  -moz-transform: scale3d($ratioX, $ratioY, $ratioZ);
  -ms-transform: scale3d($ratioX, $ratioY, $ratioZ); // IE9 only
  -o-transform: scale3d($ratioX, $ratioY, $ratioZ);
  transform: scale3d($ratioX, $ratioY, $ratioZ);
}

/// CSS3 transform: scaleX 的兼容性方法
///
/// @name scaleX
/// @param {Number} $ratio - X轴方向缩放的倍数，小数位缩小，大于1为放大
@mixin scaleX($ratio) {
  -webkit-transform: scaleX($ratio);
  -moz-transform: scaleX($ratio);
  -ms-transform: scaleX($ratio); // IE9 only
  -o-transform: scaleX($ratio);
  transform: scaleX($ratio);
}

/// CSS3 transform: scaleY 的兼容性方法
///
/// @name scaleY
/// @param {Number} $ratio - Y轴方向缩放的倍数，小数位缩小，大于1为放大
@mixin scaleY($ratio) {
  -webkit-transform: scaleY($ratio);
  -moz-transform: scaleY($ratio);
  -ms-transform: scaleY($ratio); // IE9 only
  -o-transform: scaleY($ratio);
  transform: scaleY($ratio);
}

/// CSS3 transform: skew 的兼容性方法
///
/// @name skew
/// @param {Number} $x - X轴方向倾斜的角度
/// @param {Number} $y - X轴方向倾斜的角度
@mixin skew($x, $y) {
  -webkit-transform: skew($x, $y);
  -moz-transform: skew($x, $y);
  -ms-transform: skewX($x) skewY($y); // See https://github.com/twbs/bootstrap/issues/4885; IE9+
  -o-transform: skew($x, $y);
  transform: skew($x, $y);
}

/// CSS3 transform: translate 的兼容性方法
///
/// @name translate
/// @param {Number} $x - X轴方向平移的距离
/// @param {Number} $y - Y轴方向平移的距离
@mixin translate($x, $y) {
  -webkit-transform: translate($x, $y);
  -moz-transform: translate($x, $y);
  -ms-transform: translate($x, $y); // IE9 only
  -o-transform: translate($x, $y);
  transform: translate($x, $y);
}

/// CSS3 transform: translateX 的兼容性方法
///
/// @name translateX
/// @param {Number} $x - X轴方向平移的距离
@mixin translateX($x) {
  -webkit-transform: translateX($x);
  -moz-transform: translateX($x);
  -ms-transform: translateX($x); // IE9 only
  -o-transform: translateX($x);
  transform: translateX($x);
}

/// CSS3 transform: translateY 的兼容性方法
///
/// @name translateY
/// @param {Number} $y - Y轴方向平移的距离
@mixin translateY($y) {
  -webkit-transform: translateY($y);
  -moz-transform: translateY($y);
  -ms-transform: translateY($y); // IE9 only
  -o-transform: translateY($y);
  transform: translateY($y);
}

/// CSS3 transform: translate3d 的兼容性方法
///
/// @name translate3d
/// @param {Number} $x - X轴方向平移的距离
/// @param {Number} $y - Y轴方向平移的距离
/// @param {Number} $z - Z轴方向平移的距离
@mixin translate3d($x, $y, $z) {
  -webkit-transform: translate3d($x, $y, $z);
  -moz-transform: translate3d($x, $y, $z);
  transform: translate3d($x, $y, $z);
}

/// CSS3 transform: rotate 的兼容性方法
///
/// @name rotate
/// @param {Number} $degrees - 元素旋转的角度
@mixin rotate($degrees) {
  -webkit-transform: rotate($degrees);
  -moz-transform: rotate($degrees);
  -ms-transform: rotate($degrees); // IE9 only
  -o-transform: rotate($degrees);
  transform: rotate($degrees);
}

/// CSS3 transform: rotateX 的兼容性方法
///
/// @name rotateX
/// @param {Number} $degrees - 元素在X轴方向旋转的角度
@mixin rotateX($degrees) {
  -webkit-transform: rotateX($degrees);
  -moz-transform: rotateX($degrees);
  -ms-transform: rotateX($degrees); // IE9 only
  -o-transform: rotateX($degrees);
  transform: rotateX($degrees);
}

/// CSS3 transform: rotateY 的兼容性方法
///
/// @name rotateY
/// @param {Number} $degrees - 元素在Y轴方向旋转的角度
@mixin rotateY($degrees) {
  -webkit-transform: rotateY($degrees);
  -moz-transform: rotateY($degrees);
  -ms-transform: rotateY($degrees); // IE9 only
  -o-transform: rotateY($degrees);
  transform: rotateY($degrees);
}

/// CSS3 perspective 的兼容性方法
///
/// @name perspective
/// @param {Measure} $perspective - 观察者与 z=0 平面的距离
@mixin perspective($perspective) {
  -webkit-perspective: $perspective;
  -moz-perspective: $perspective;
  perspective: $perspective;
}

/// CSS3 perspective-origin 的兼容性方法
///
/// @name perspective-origin
/// @param {Number} $origin - CSS 属性 perspective-origin 的属性值
@mixin perspective-origin($origin) {
  -webkit-perspective-origin: $origin;
  -moz-perspective-origin: $origin;
  perspective-origin: $origin;
}

/// CSS3 transform-origin 的兼容性方法
///
/// @name transform-origin
/// @param {Number} $origin - CSS 属性 transform-origin 的属性值
@mixin transform-origin($origin) {
  -webkit-transform-origin: $origin;
  -moz-transform-origin: $origin;
  -ms-transform-origin: $origin; // IE9 only
  transform-origin: $origin;
}

/// CSS3 transition 的兼容性方法
///
/// @name transition
/// @param {String} $transition - CSS 属性 transition 的属性值
@mixin transition($transition...) {
  -webkit-transition: $transition;
  -moz-transition: $transition;
  -o-transition: $transition;
  transition: $transition;
}

/// CSS3 transition-property 的兼容性方法
///
/// @name transition-property
/// @param {String} $transition-property - CSS 属性 transition-property 的属性值
@mixin transition-property($transition-property...) {
  -webkit-transition-property: $transition-property;
  -moz-transition-property: $transition-property;
  -o-transition-property: $transition-property;
  transition-property: $transition-property;
}

/// CSS3 transition-delay 的兼容性方法
///
/// @name transition-delay
/// @param {Number} $transition-delay - CSS 属性 transition-delay 的属性值
@mixin transition-delay($transition-delay) {
  -webkit-transition-delay: $transition-delay;
  -moz-transition-delay: $transition-delay;
  -o-transition-delay: $transition-delay;
  transition-delay: $transition-delay;
}

/// CSS3 transition-duration 的兼容性方法
///
/// @name transition-duration
/// @param {Number} $transition-duration - CSS 属性 transition-duration 的属性值
@mixin transition-duration($transition-duration...) {
  -webkit-transition-duration: $transition-duration;
  -moz-transition-duration: $transition-duration;
  -o-transition-duration: $transition-duration;
  transition-duration: $transition-duration;
}

/// CSS3 transition-timing-function 的兼容性方法
///
/// @name transition-timing-function
/// @param {String} $timing-function - CSS 属性 transition-timing-function 的属性值
@mixin transition-timing-function($timing-function) {
  -webkit-transition-timing-function: $timing-function;
  -moz-transition-timing-function: $timing-function;
  -o-transition-timing-function: $timing-function;
  transition-timing-function: $timing-function;
}

/// CSS3 transition: transform 的兼容性方法，适用于需要在 transition 中使用 transform 属性的情况，会自动对应补全好这两个属性的前缀。
///
/// @name transition-transform
/// @param {String} $transionWithoutProperty - CSS 属性 transition 中除了 transition-property 外的其他值
@mixin transition-transform($transionWithoutProperty...) {
  -webkit-transition: -webkit-transform $transionWithoutProperty;
  -moz-transition: -webkit-transform $transionWithoutProperty;
  -o-transition: -o-transform $transionWithoutProperty;
  transition: transform $transionWithoutProperty;
}

/// CSS3 animation 的兼容性方法
///
/// @name animation
/// @param {String} $animation - CSS 属性 animation 的属性值
@mixin animation($animation) {
  -webkit-animation: $animation;
  -moz-animation: $animation;
  -o-animation: $animation;
  animation: $animation;
}

/// CSS3 animation-name 的兼容性方法
///
/// @name animation
/// @param {String} $name - CSS 属性 animation-name 的属性值
@mixin animation-name($name) {
  -webkit-animation-name: $name;
  -moz-animation-name: $name;
  -o-animation-name: $name;
  animation-name: $name;
}

/// CSS3 animation-duration 的兼容性方法
///
/// @name animation-duration
/// @param {Number} $duration - CSS 属性 animation-duration 的属性值
@mixin animation-duration($duration) {
  -webkit-animation-duration: $duration;
  -moz-animation-duration: $duration;
  -o-animation-duration: $duration;
  animation-duration: $duration;
}

/// CSS3 animation-timing-function 的兼容性方法
///
/// @name animation-timing-function
/// @param {Number} $timing-function - CSS 属性 animation-timing-function 的属性值
@mixin animation-timing-function($timing-function) {
  -webkit-animation-timing-function: $timing-function;
  -moz-animation-timing-function: $timing-function;
  -o-animation-timing-function: $timing-function;
  animation-timing-function: $timing-function;
}

/// CSS3 animation-delay 的兼容性方法
///
/// @name animation-delay
/// @param {Number} $delay - CSS 属性 animation-delay 的属性值
@mixin animation-delay($delay) {
  -webkit-animation-delay: $delay;
  -moz-animation-delay: $delay;
  -o-animation-delay: $delay;
  animation-delay: $delay;
}

/// CSS3 animation-iteration-count 的兼容性方法
///
/// @name animation-iteration-count
/// @param {Number} $iteration-count - CSS 属性 animation-iteration-count 的属性值
@mixin animation-iteration-count($iteration-count) {
  -webkit-animation-iteration-count: $iteration-count;
  -moz-animation-iteration-count: $iteration-count;
  -o-animation-iteration-count: $iteration-count;
  animation-iteration-count: $iteration-count;
}

/// CSS3 animation-direction 的兼容性方法
///
/// @name animation-direction
/// @param {String} $direction - CSS 属性 animation-direction 的属性值
@mixin animation-direction($direction) {
  -webkit-animation-direction: $direction;
  -moz-animation-direction: $direction;
  -o-animation-direction: $direction;
  animation-direction: $direction;
}

/// CSS3 animation-fill-mode 的兼容性方法
///
/// @name animation-fill-mode
/// @param {String} $fill-mode - CSS 属性 animation-fill-mode 的属性值
@mixin animation-fill-mode($fill-mode) {
  -webkit-animation-fill-mode: $fill-mode;
  -moz-animation-fill-mode: $fill-mode;
  -o-animation-fill-mode: $fill-mode;
  animation-fill-mode: $fill-mode;
}

/// CSS3 keyframes 的兼容性方法
///
/// @name keyframes
/// @param {String} $name - 动画名
@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }
  @-moz-keyframes #{$name} {
    @content;
  }
  @-o-keyframes #{$name} {
    @content;
  }
  @keyframes #{$name} {
    @content;
  }
}
// stylelint-enable
